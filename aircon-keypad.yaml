esphome:
  name: aircon-keypad
  friendly_name: Aircon Keypad
  includes:
    - led_proto2.h
#    - test_custom.h
#     - actron_keypad_pulse.h

#custom_component:
#  - lambda: |-
#      auto ledproto = new LedProto(33);  # 33 corresponds to pin G33
#      return {ledproto};
esp32:
  board: m5stack-core-esp32
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG #INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_api_key

ota:
  password: !secret esphome_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Aircon-Keypad Fallback Hotspot"
    password: "M3odvzX6U8gI"

captive_portal:

web_server:
  port: 80

#Enable sensor to read POWER-C voltage for LEDs 
#https://esphome.io/components/sensor/adc.html?highlight=gpio+sensor
#sensor:
#  - platform: adc
#    pin: GPIO33
#    name: "Aircon Wall Panel - POWER-D"
#    update_interval: 50ms
#    accuracy_decimals: 3
#    filters:   
#    - multiply: 4.9166

##Dummy test sensor
#  - platform: custom
#    lambda: |-
#      auto my_sensor = new TestCustomSensor();
#      App.register_component(my_sensor);
#      return {my_sensor};
#    sensors:
#      name: "Test Custom Sensor"
  


#Setup i2c bus to controll MCP4725
#https://esphome.io/components/i2c#i2c
i2c:
  sda: 25
  scl: 21
  scan: true

#MCP4725 output to Send Voltages for key presses 
#https://esphome.io/components/output/mcp4725
output:
  - platform: mcp4725
    id: dac_output
    address: 0x62


##***TESTING***
# Define a number input component to output mV to the DAC
number:
  - platform: template
    name: "DAC Output miliVolts"
    min_value: 0
    max_value: 5000  # Adjust this value according to the DAC's range
    step: 1    # Adjust the step size as needed
    restore_value: true
    optimistic: true
    on_value:
      then:
        lambda: |-
          id(dac_output).set_level((x / 5000.0));
###############################################################


button:
  - platform: template
    name: "Power"
    on_press:
      - logger.log: Power Button Pressed
      - lambda: |-
          id(dac_output).set_level((5000.0 / 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));

  - platform: template
    name: "Fan"
    on_press:
      - logger.log: Fan Button Pressed
      - lambda: |-
          id(dac_output).set_level((718.0 / 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));

  - platform: template
    name: "Temp Up"
    on_press:
      - logger.log: Temp Up Button Pressed
      - lambda: |-
          id(dac_output).set_level((835.0/ 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));

  - platform: template
    name: "Temp Down"
    on_press:
      - logger.log: Temp Down Button Pressed
      - lambda: |-
          id(dac_output).set_level((741.0/ 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));


  - platform: template
    name: "Mode"
    on_press:
      - logger.log: Mode Button Pressed
      - lambda: |-
          id(dac_output).set_level((908.0/ 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));

  - platform: template
    name: "Timer"
    on_press:
      - logger.log: Timer Button Pressed
      - lambda: |-
          id(dac_output).set_level((810.0/ 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));

  - platform: template
    name: "Timer Up"
    on_press:
      - logger.log: Timer Up Button Pressed
      - lambda: |-
          id(dac_output).set_level((778.0/ 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));

  - platform: template
    name: "Timer Down"
    on_press:
      - logger.log: Timer Down Button Pressed
      - lambda: |-
          id(dac_output).set_level((763.0/ 5000.0));
      - delay: 800ms
      - lambda: |-
          id(dac_output).set_level((0.0 / 5000.0));


sensor:
- platform: custom
  lambda: |-
    auto keypad_status = new KeypadStatus();
    App.register_component(keypad_status);
    return {keypad_status->displayValue, keypad_status->bitcount};
  sensors:
  - name: "Display Value"
    unit_of_measurement: ""  # Add any unit of measurement if needed
    accuracy_decimals: 1     # Adjust as needed
  - name: "Bit Count"
  
text_sensor:
- platform: custom
  lambda: |-
    auto keypad_status = new KeypadStatus();
    App.register_component(keypad_status);
    return {keypad_status->bitString};
  text_sensors:
  - name: "Bit String"


binary_sensor:
- platform: custom
  lambda: |-
    auto keypad_status = new KeypadStatus();
    App.register_component(keypad_status);
    return {keypad_status->cool, keypad_status->run_blink, keypad_status->unk1, keypad_status->run, 
            keypad_status->room, keypad_status->unk2, keypad_status->unk3, keypad_status->unk4, 
            keypad_status->cool_auto, keypad_status->fan_hi, keypad_status->fan_mid, keypad_status->fan_low, 
            keypad_status->room3, keypad_status->room4, keypad_status->room2, keypad_status->heat, 
            keypad_status->room1, keypad_status->unk5, keypad_status->unk5 };

  binary_sensors:
  - name: "Cool"
  - name: "Run Blink"
  - name: "unk1"
  - name: "Run"
  - name: "Room"
  - name: "unk2"
  - name: "unk3"
  - name: "unk4"
  - name: "Cool Auto"
  - name: "Fan Hi"
  - name: "Fan Mid"
  - name: "Fan Low"
  - name: "Room3"
  - name: "Room4"
  - name: "Room2"
  - name: "Heat"
  - name: "Room1"
  - name: "unk5"
  